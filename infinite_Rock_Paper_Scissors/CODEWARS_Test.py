import codewars_test as test
from solution import winner
@test.describe('Fixed Tests')
def fixed_tests():
    @test.describe('1 item in list')
    def one():
        choices = ["rock"]
        test.assert_equals(winner(choices,'rock', 'rock'), 'Draw!')
    @test.describe('2 items in list')
    def two():
        choices = ["rock","paper"]
        test.assert_equals(winner(choices,'rock', 'rock'), 'Draw!')
        test.assert_equals(winner(choices,'rock', 'paper'), 'Draw!')
        test.assert_equals(winner(choices,'paper', 'rock'), 'Draw!')
        test.assert_equals(winner(choices,'paper', 'paper'), 'Draw!')
    @test.describe('3 items in list')
    def three():
        choices = ["rock","paper","scissors"]
        @test.it('Test for player 1 win')
        def p1win():
            test.assert_equals(winner(choices,'rock', 'scissors'), 'Player 1 won!')
            test.assert_equals(winner(choices,'paper', 'rock'), 'Player 1 won!')
            test.assert_equals(winner(choices,'scissors', 'paper'), 'Player 1 won!')
        @test.it('Test for player 2 win')
        def p2win():
            test.assert_equals(winner(choices,'rock', 'paper'), 'Player 2 won!')
            test.assert_equals(winner(choices,'paper', 'scissors'), 'Player 2 won!')
            test.assert_equals(winner(choices,'scissors', 'rock'), 'Player 2 won!')
        @test.it("Test for draw")
        def draw():
            test.assert_equals(winner(choices,'rock', 'rock'), 'Draw!')
            test.assert_equals(winner(choices,'paper', 'paper'), 'Draw!')
            test.assert_equals(winner(choices,'scissors', 'scissors'), 'Draw!')
    @test.describe('4 items in list')
    def four():
        choices = ["heavy","sniper","soldier","pyro"]
        @test.it('Test for player 1 win')
        def p1win():
            test.assert_equals(winner(choices,'heavy', 'pyro'), 'Player 1 won!')
            test.assert_equals(winner(choices,'sniper', 'heavy'), 'Player 1 won!')
            test.assert_equals(winner(choices,'soldier', 'sniper'), 'Player 1 won!')
            test.assert_equals(winner(choices,'pyro', 'soldier'), 'Player 1 won!')
        @test.it('Test for player 2 win')
        def p2win():
            test.assert_equals(winner(choices,'heavy', 'sniper'), 'Player 2 won!')
            test.assert_equals(winner(choices,'sniper', 'soldier'), 'Player 2 won!')
            test.assert_equals(winner(choices,'soldier', 'pyro'), 'Player 2 won!')
            test.assert_equals(winner(choices,'pyro', 'heavy'), 'Player 2 won!')
        @test.it("Test for draw")
        def draw():
            test.assert_equals(winner(choices,'heavy', 'heavy'), 'Draw!')
            test.assert_equals(winner(choices,'heavy', 'soldier'), 'Draw!')
            test.assert_equals(winner(choices,'sniper', 'sniper'), 'Draw!')
            test.assert_equals(winner(choices,'sniper', 'pyro'), 'Draw!')
            test.assert_equals(winner(choices,'soldier', 'heavy'), 'Draw!')
            test.assert_equals(winner(choices,'soldier', 'soldier'), 'Draw!')
            test.assert_equals(winner(choices,'pyro', 'sniper'), 'Draw!')
            test.assert_equals(winner(choices,'pyro', 'pyro'), 'Draw!')
    @test.describe('5 items in list')
    def five():
        choices = ["rock","spock","paper","lizard","scissors"]
        @test.it('Test for player 1 win')
        def p1win():
            test.assert_equals(winner(choices,'rock', 'lizard'), 'Player 1 won!')
            test.assert_equals(winner(choices,'rock', 'scissors'), 'Player 1 won!')
            test.assert_equals(winner(choices,'spock', 'rock'), 'Player 1 won!')
            test.assert_equals(winner(choices,'spock', 'scissors'), 'Player 1 won!')
            test.assert_equals(winner(choices,'paper', 'rock'), 'Player 1 won!')
            test.assert_equals(winner(choices,'paper', 'spock'), 'Player 1 won!')
            test.assert_equals(winner(choices,'lizard', 'spock'), 'Player 1 won!')
            test.assert_equals(winner(choices,'lizard', 'paper'), 'Player 1 won!')
            test.assert_equals(winner(choices,'scissors', 'paper'), 'Player 1 won!')
            test.assert_equals(winner(choices,'scissors', 'lizard'), 'Player 1 won!')

        @test.it('Test for player 2 win')
        def p2win():
            test.assert_equals(winner(choices,'rock', 'spock'), 'Player 2 won!')
            test.assert_equals(winner(choices,'rock', 'paper'), 'Player 2 won!')
            test.assert_equals(winner(choices,'spock', 'paper'), 'Player 2 won!')
            test.assert_equals(winner(choices,'spock', 'lizard'), 'Player 2 won!')
            test.assert_equals(winner(choices,'paper', 'lizard'), 'Player 2 won!')
            test.assert_equals(winner(choices,'paper', 'scissors'), 'Player 2 won!')
            test.assert_equals(winner(choices,'lizard', 'rock'), 'Player 2 won!')
            test.assert_equals(winner(choices,'lizard', 'scissors'), 'Player 2 won!')
            test.assert_equals(winner(choices,'scissors', 'rock'), 'Player 2 won!')
            test.assert_equals(winner(choices,'scissors', 'spock'), 'Player 2 won!')

        @test.it("Test for draw")
        def draw():
            test.assert_equals(winner(choices,'rock', 'rock'), 'Draw!')
            test.assert_equals(winner(choices,'spock', 'spock'), 'Draw!')
            test.assert_equals(winner(choices,'paper', 'paper'), 'Draw!')
            test.assert_equals(winner(choices,'lizard', 'lizard'), 'Draw!')
            test.assert_equals(winner(choices,'scissors', 'scissors'), 'Draw!')
    @test.describe('6 items in list')
    def siz():
        choices = ["Mario","Sonic","Goku","Batman","Spiderman","Elsa"]
        @test.it('Test for player 1 win')
        def p1win():
            test.assert_equals(winner(choices,'Mario', 'Spiderman'), 'Player 1 won!')
            test.assert_equals(winner(choices,'Mario', 'Elsa'), 'Player 1 won!')
            test.assert_equals(winner(choices,'Sonic', 'Mario'), 'Player 1 won!')
            test.assert_equals(winner(choices,'Sonic', 'Elsa'), 'Player 1 won!')
            test.assert_equals(winner(choices,'Goku', 'Mario'), 'Player 1 won!')
            test.assert_equals(winner(choices,'Goku', 'Sonic'), 'Player 1 won!')
            test.assert_equals(winner(choices,'Batman', 'Sonic'), 'Player 1 won!')
            test.assert_equals(winner(choices,'Batman', 'Goku'), 'Player 1 won!')
            test.assert_equals(winner(choices,'Spiderman', 'Goku'), 'Player 1 won!')
            test.assert_equals(winner(choices,'Spiderman', 'Batman'), 'Player 1 won!')
            test.assert_equals(winner(choices,'Elsa', 'Batman'), 'Player 1 won!')
            test.assert_equals(winner(choices,'Elsa', 'Spiderman'), 'Player 1 won!')
        @test.it('Test for player 2 win')
        def p2win():
            test.assert_equals(winner(choices,'Mario', 'Sonic'), 'Player 2 won!')
            test.assert_equals(winner(choices,'Mario', 'Goku'), 'Player 2 won!')
            test.assert_equals(winner(choices,'Sonic', 'Goku'), 'Player 2 won!')
            test.assert_equals(winner(choices,'Sonic', 'Batman'), 'Player 2 won!')
            test.assert_equals(winner(choices,'Goku', 'Batman'), 'Player 2 won!')
            test.assert_equals(winner(choices,'Goku', 'Spiderman'), 'Player 2 won!')
            test.assert_equals(winner(choices,'Batman', 'Spiderman'), 'Player 2 won!')
            test.assert_equals(winner(choices,'Batman', 'Elsa'), 'Player 2 won!')
            test.assert_equals(winner(choices,'Spiderman', 'Mario'), 'Player 2 won!')
            test.assert_equals(winner(choices,'Spiderman', 'Elsa'), 'Player 2 won!')
            test.assert_equals(winner(choices,'Elsa', 'Mario'), 'Player 2 won!')
            test.assert_equals(winner(choices,'Elsa', 'Sonic'), 'Player 2 won!')
        @test.it("Test for draw")
        def draw():
            test.assert_equals(winner(choices,'Mario', 'Mario'), 'Draw!')
            test.assert_equals(winner(choices,'Mario', 'Batman'), 'Draw!')
            test.assert_equals(winner(choices,'Sonic', 'Sonic'), 'Draw!')
            test.assert_equals(winner(choices,'Sonic', 'Spiderman'), 'Draw!')
            test.assert_equals(winner(choices,'Goku', 'Goku'), 'Draw!')
            test.assert_equals(winner(choices,'Goku', 'Elsa'), 'Draw!')
            test.assert_equals(winner(choices,'Batman', 'Mario'), 'Draw!')
            test.assert_equals(winner(choices,'Batman', 'Batman'), 'Draw!')
            test.assert_equals(winner(choices,'Spiderman', 'Sonic'), 'Draw!')
            test.assert_equals(winner(choices,'Spiderman', 'Spiderman'), 'Draw!')
            test.assert_equals(winner(choices,'Elsa', 'Goku'), 'Draw!')
            test.assert_equals(winner(choices,'Elsa', 'Elsa'), 'Draw!')
    @test.describe('9 items in list')
    def nine():
        choices = ['human', 'rope', 'rock', 'knife', 'balloon', 'paper', 'bomb', 'water bottle', 'scissors']
        @test.it('Test for player 1 win')
        def p1win():
            test.assert_equals(winner(choices,'human', 'paper'), 'Player 1 won!')
            test.assert_equals(winner(choices,'human', 'bomb'), 'Player 1 won!')
            test.assert_equals(winner(choices,'human', 'water bottle'), 'Player 1 won!')
            test.assert_equals(winner(choices,'human', 'scissors'), 'Player 1 won!')
            test.assert_equals(winner(choices,'rope', 'human'), 'Player 1 won!')
            test.assert_equals(winner(choices,'rope', 'bomb'), 'Player 1 won!')
            test.assert_equals(winner(choices,'rope', 'water bottle'), 'Player 1 won!')
            test.assert_equals(winner(choices,'rope', 'scissors'), 'Player 1 won!')
            test.assert_equals(winner(choices,'rock', 'human'), 'Player 1 won!')
            test.assert_equals(winner(choices,'rock', 'rope'), 'Player 1 won!')
            test.assert_equals(winner(choices,'rock', 'water bottle'), 'Player 1 won!')
            test.assert_equals(winner(choices,'rock', 'scissors'), 'Player 1 won!')
            test.assert_equals(winner(choices,'knife', 'human'), 'Player 1 won!')
            test.assert_equals(winner(choices,'knife', 'rope'), 'Player 1 won!')
            test.assert_equals(winner(choices,'knife', 'rock'), 'Player 1 won!')
            test.assert_equals(winner(choices,'knife', 'scissors'), 'Player 1 won!')
            test.assert_equals(winner(choices,'balloon', 'human'), 'Player 1 won!')
            test.assert_equals(winner(choices,'balloon', 'rope'), 'Player 1 won!')
            test.assert_equals(winner(choices,'balloon', 'rock'), 'Player 1 won!')
            test.assert_equals(winner(choices,'balloon', 'knife'), 'Player 1 won!')
            test.assert_equals(winner(choices,'paper', 'rope'), 'Player 1 won!')
            test.assert_equals(winner(choices,'paper', 'rock'), 'Player 1 won!')
            test.assert_equals(winner(choices,'paper', 'knife'), 'Player 1 won!')
            test.assert_equals(winner(choices,'paper', 'balloon'), 'Player 1 won!')
            test.assert_equals(winner(choices,'bomb', 'rock'), 'Player 1 won!')
            test.assert_equals(winner(choices,'bomb', 'knife'), 'Player 1 won!')
            test.assert_equals(winner(choices,'bomb', 'balloon'), 'Player 1 won!')
            test.assert_equals(winner(choices,'bomb', 'paper'), 'Player 1 won!')
            test.assert_equals(winner(choices,'water bottle', 'knife'), 'Player 1 won!')
            test.assert_equals(winner(choices,'water bottle', 'balloon'), 'Player 1 won!')
            test.assert_equals(winner(choices,'water bottle', 'paper'), 'Player 1 won!')
            test.assert_equals(winner(choices,'water bottle', 'bomb'), 'Player 1 won!')
            test.assert_equals(winner(choices,'scissors', 'balloon'), 'Player 1 won!')
            test.assert_equals(winner(choices,'scissors', 'paper'), 'Player 1 won!')
            test.assert_equals(winner(choices,'scissors', 'bomb'), 'Player 1 won!')
            test.assert_equals(winner(choices,'scissors', 'water bottle'), 'Player 1 won!')

        @test.it('Test for player 2 win')
        def p2win():
            test.assert_equals(winner(choices,'human', 'rope'), 'Player 2 won!')
            test.assert_equals(winner(choices,'human', 'rock'), 'Player 2 won!')
            test.assert_equals(winner(choices,'human', 'knife'), 'Player 2 won!')
            test.assert_equals(winner(choices,'human', 'balloon'), 'Player 2 won!')
            test.assert_equals(winner(choices,'rope', 'rock'), 'Player 2 won!')
            test.assert_equals(winner(choices,'rope', 'knife'), 'Player 2 won!')
            test.assert_equals(winner(choices,'rope', 'balloon'), 'Player 2 won!')
            test.assert_equals(winner(choices,'rope', 'paper'), 'Player 2 won!')
            test.assert_equals(winner(choices,'rock', 'knife'), 'Player 2 won!')
            test.assert_equals(winner(choices,'rock', 'balloon'), 'Player 2 won!')
            test.assert_equals(winner(choices,'rock', 'paper'), 'Player 2 won!')
            test.assert_equals(winner(choices,'rock', 'bomb'), 'Player 2 won!')
            test.assert_equals(winner(choices,'knife', 'balloon'), 'Player 2 won!')
            test.assert_equals(winner(choices,'knife', 'paper'), 'Player 2 won!')
            test.assert_equals(winner(choices,'knife', 'bomb'), 'Player 2 won!')
            test.assert_equals(winner(choices,'knife', 'water bottle'), 'Player 2 won!')
            test.assert_equals(winner(choices,'balloon', 'paper'), 'Player 2 won!')
            test.assert_equals(winner(choices,'balloon', 'bomb'), 'Player 2 won!')
            test.assert_equals(winner(choices,'balloon', 'water bottle'), 'Player 2 won!')
            test.assert_equals(winner(choices,'balloon', 'scissors'), 'Player 2 won!')
            test.assert_equals(winner(choices,'paper', 'human'), 'Player 2 won!')
            test.assert_equals(winner(choices,'paper', 'bomb'), 'Player 2 won!')
            test.assert_equals(winner(choices,'paper', 'water bottle'), 'Player 2 won!')
            test.assert_equals(winner(choices,'paper', 'scissors'), 'Player 2 won!')
            test.assert_equals(winner(choices,'bomb', 'human'), 'Player 2 won!')
            test.assert_equals(winner(choices,'bomb', 'rope'), 'Player 2 won!')
            test.assert_equals(winner(choices,'bomb', 'water bottle'), 'Player 2 won!')
            test.assert_equals(winner(choices,'bomb', 'scissors'), 'Player 2 won!')
            test.assert_equals(winner(choices,'water bottle', 'human'), 'Player 2 won!')
            test.assert_equals(winner(choices,'water bottle', 'rope'), 'Player 2 won!')
            test.assert_equals(winner(choices,'water bottle', 'rock'), 'Player 2 won!')
            test.assert_equals(winner(choices,'water bottle', 'scissors'), 'Player 2 won!')
            test.assert_equals(winner(choices,'scissors', 'human'), 'Player 2 won!')
            test.assert_equals(winner(choices,'scissors', 'rope'), 'Player 2 won!')
            test.assert_equals(winner(choices,'scissors', 'rock'), 'Player 2 won!')
            test.assert_equals(winner(choices,'scissors', 'knife'), 'Player 2 won!')

        @test.it("Test for draw")
        def draw():
            test.assert_equals(winner(choices,'human', 'human'), 'Draw!')
            test.assert_equals(winner(choices,'rope', 'rope'), 'Draw!')
            test.assert_equals(winner(choices,'rock', 'rock'), 'Draw!')
            test.assert_equals(winner(choices,'knife', 'knife'), 'Draw!')
            test.assert_equals(winner(choices,'balloon', 'balloon'), 'Draw!')
            test.assert_equals(winner(choices,'paper', 'paper'), 'Draw!')
            test.assert_equals(winner(choices,'bomb', 'bomb'), 'Draw!')
            test.assert_equals(winner(choices,'water bottle', 'water bottle'), 'Draw!')
            test.assert_equals(winner(choices,'scissors', 'scissors'), 'Draw!')
